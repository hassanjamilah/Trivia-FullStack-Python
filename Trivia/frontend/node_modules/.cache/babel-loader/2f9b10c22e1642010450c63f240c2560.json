{"ast":null,"code":"var _jsxFileName = \"/Users/user/Hassan/Full Stack Developer Nanodegree/003 API Development and Documentation/Lesson 6 Project Trivia API/Trivia Project/Trivia/frontend/src/components/QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: \"/questions?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: result.categories,\n            currentCategory: result.current_category\n          });\n          alert(result);\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: \"/categories/\".concat(id, \"/questions\"),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: \"/questions\",\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"/questions/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.getQuestions());\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["/Users/user/Hassan/Full Stack Developer Nanodegree/003 API Development and Documentation/Lesson 6 Project Trivia API/Trivia Project/Trivia/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","setState","questions","totalQuestions","total_questions","categories","currentCategory","current_category","alert","error","getByCategory","id","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `/questions?page=${this.state.page}`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category })\n        alert(result)\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    this.setState({page: num}, () => this.getQuestions());\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    $.ajax({\n      url: `/categories/${id}/questions`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    $.ajax({\n      url: `/questions`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `/questions/${id}`, //TODO: update request URL\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"question-view\">\n        {this.getQuestions()}\n\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}